import time
import sqlite3
import telebot
from data.config import BOT_TOKEN, ADMIN_ID, API_KEY, MODEL1, MODEL2, LOG_FILE_PATH, MAX_MESSAGE_LENGTH, DB_PATH
from mistralai import Mistral

bot = telebot.TeleBot(BOT_TOKEN)
client = Mistral(api_key=API_KEY)
user_model_selection = {}
last_request_time = {}
user_context = {}

def log_error(error_message):
    try:
        with open(LOG_FILE_PATH, 'a') as log_file:
            log_file.write(f"{time.strftime('%Y-%m-%d %H:%M:%S')} - {error_message}\n")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ —Ñ–∞–π–ª –∂—É—Ä–Ω–∞–ª–∞: {e}")

def initialize_database():
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute('''CREATE TABLE IF NOT EXISTS users (id INTEGER PRIMARY KEY)''')
        conn.commit()
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
    finally:
        conn.close()

def save_user_id(user_id):
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("INSERT OR IGNORE INTO users (id) VALUES (?)", (user_id,))
        conn.commit()
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    finally:
        conn.close()

def get_user_count():
    try:
        conn = sqlite3.connect(DB_PATH)
        cursor = conn.cursor()
        cursor.execute("SELECT COUNT(*) FROM users")
        count = cursor.fetchone()[0]
        return count
    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
        return 0
    finally:
        conn.close()

def update_model_buttons(chat_id, message_id, selected_model):
    markup = telebot.types.InlineKeyboardMarkup()

    button1_text = "‚úÖ GPT v1" if selected_model == MODEL1 else "GPT v1"
    button2_text = "‚úÖ GPT v2" if selected_model == MODEL2 else "GPT v2"

    button1 = telebot.types.InlineKeyboardButton(text=button1_text, callback_data="GPT v1")
    button2 = telebot.types.InlineKeyboardButton(text=button2_text, callback_data="GPT v2")

    markup.add(button1, button2)

    bot.edit_message_reply_markup(chat_id, message_id, reply_markup=markup)

@bot.message_handler(commands=['start'])
def start_message(message):
    save_user_id(message.chat.id)
    bot.send_message(message.chat.id, "üëã –ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ!\n–ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–≥–æ!\n\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏.")

@bot.message_handler(commands=['help'])
def help_message(message):
    bot.send_message(message.chat.id, "‚ú® <b>–ú–æ–∏ –∫–æ–º–∞–Ω–¥—ã</b>\n\n/start - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫\n/img - –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n/mode - –≤—ã–±–æ—Ä –º–æ–¥–µ–ª–∏\n/reset - —Å–±—Ä–æ—Å–∏—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç\n/help - —Å–ø—Ä–∞–≤–∫–∞", parse_mode='HTML')

@bot.message_handler(commands=['mode'])
def model_command(message):
    selected_model = user_model_selection.get(message.chat.id, MODEL1)

    markup = telebot.types.InlineKeyboardMarkup()
    button1_text = "‚úÖ GPT v1" if selected_model == MODEL1 else "GPT v1"
    button2_text = "‚úÖ GPT v2" if selected_model == MODEL2 else "GPT v2"

    button1 = telebot.types.InlineKeyboardButton(text=button1_text, callback_data="GPT v1")
    button2 = telebot.types.InlineKeyboardButton(text=button2_text, callback_data="GPT v2")
    markup.add(button1, button2)

    bot.send_message(message.chat.id, "–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=markup)
    if message.chat.id not in user_model_selection:
        user_model_selection[message.chat.id] = MODEL1

@bot.callback_query_handler(func=lambda call: call.data in ['GPT v1', 'GPT v2'])
def handle_model_selection(call):
    chat_id = call.message.chat.id
    current_model = user_model_selection.get(chat_id, MODEL1)

    if (call.data == 'GPT v1' and current_model == MODEL1) or (call.data == 'GPT v2' and current_model == MODEL2):
        bot.answer_callback_query(call.id, text="–≠—Ç–∞ –º–æ–¥–µ–ª—å —É–∂–µ –≤—ã–±—Ä–∞–Ω–∞")
        return

    if call.data == 'GPT v1':
        user_model_selection[chat_id] = MODEL1
    elif call.data == 'GPT v2':
        user_model_selection[chat_id] = MODEL2

    update_model_buttons(chat_id, call.message.message_id, user_model_selection[chat_id])

@bot.message_handler(commands=['reset'])
def reset_context(message):
    user_context[message.chat.id] = []
    bot.send_message(message.chat.id, "‚ú® –ö–æ–Ω—Ç–µ–∫—Å—Ç –±—ã–ª —Å–±—Ä–æ—à–µ–Ω.")

@bot.message_handler(commands=['admin'])
def admin_command(message):
    if message.from_user.id == ADMIN_ID:
        markup = telebot.types.InlineKeyboardMarkup()
        button = telebot.types.InlineKeyboardButton(text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")
        markup.add(button)
        bot.send_message(message.chat.id, "–ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å", reply_markup=markup)
    else:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")

@bot.callback_query_handler(func=lambda call: call.data == "statistics")
def handle_statistics(call):
    if call.from_user.id == ADMIN_ID:
        try:
            user_count = get_user_count()
            bot.send_message(call.message.chat.id, f"‚ú® –í—Å–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {user_count}")
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

@bot.message_handler(func=lambda message: True)
def handle_user_request(message):
    model = user_model_selection.get(message.chat.id, MODEL1)

    chat_id = message.chat.id
    current_time = time.time()

    if chat_id in last_request_time:
        time_since_last_request = current_time - last_request_time[chat_id]
        if time_since_last_request < 1:
            time_to_wait = 1 - time_since_last_request
            time.sleep(time_to_wait)

    try:
        user_messages = user_context.get(chat_id, [])
        
        system_message = {"role": "system", "content": "–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ markdown –¥–ª—è Telegram."}
        if not any(msg["role"] == "system" and msg["content"] == system_message["content"] for msg in user_messages):
            user_messages.insert(0, system_message)

        user_messages.append({"role": "user", "content": message.text})
        
        waiting_message = bot.send_message(chat_id, "‚è≥ –û–∂–∏–¥–∞–π—Ç–µ. –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à –∑–∞–ø—Ä–æ—Å...")

        response = client.chat.complete(
            model=model,
            messages=user_messages
        )
        output_text = response.choices[0].message.content
        
        parts = [output_text[i:i+MAX_MESSAGE_LENGTH] for i in range(0, len(output_text), MAX_MESSAGE_LENGTH)]
        bot.edit_message_text(parts[0], chat_id, waiting_message.message_id, parse_mode='markdown')

        for part in parts[1:]:
            bot.send_message(chat_id, part)

        user_messages.append({"role": "assistant", "content": output_text})
        user_context[chat_id] = user_messages

    except Exception as e:
        log_error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")

    last_request_time[chat_id] = time.time()


if __name__ == '__main__':
    initialize_database()
    while True:
        try:
            bot.polling(none_stop=True)
        except Exception as e:
            log_error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")
            time.sleep(15)